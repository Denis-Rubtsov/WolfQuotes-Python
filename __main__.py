import os
import random
import json
from telegram import InlineQueryResultArticle, InputTextMessageContent, Update
from telegram.ext import Application, InlineQueryHandler, ContextTypes, CommandHandler
from uuid import uuid4
from dotenv import load_dotenv
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

load_dotenv()

DATA_FILE = "quotes.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {
            "quotes": [
                "–í—ä–ª–∫—ä —Å–ª–∞–±–µ–µ –ª—å–≤–∞ –∏ —Ç–∏–≥—Ä–∞, –Ω–æ –≤ —Ü–∏—Ä–∫–µ –Ω–µ –≤—ã—Å—Ç—É–ø–∞–µ—Ç",
                "–í—ä–ª–∫—ä - –Ω–µ —Ç–æ—Ç, –∫—Ç–æ wolf, –∞ —Ç–æ—Ç, –∫—Ç–æ Canis lupus",
                "–ï—Å–ª–∏ –≤—ä–ª–∫—ä –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–∏—Ä–∫–µ, —Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º",
                "–ï—Å–ª–∏ –≤—ä–ª–∫—ä –≥–æ–ª–æ–¥–Ω—ã–π, –ª—É—á—à–µ –µ–≥–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å",
                "–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–ª—Å—è, —Ä–∞—Å–ø—É—Ç–∞–π—Å—è",
                "–ß—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –≤—ã—Ö–æ–¥, –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –≤—Ö–æ–¥.",
                "–ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å –∫–∞–º–µ–Ω—å –≤ –≤—ä–ª–∫–∞, –Ω–æ –Ω–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å –≤—ä–ª–∫–∞ –≤ –∫–∞–º–µ–Ω—å",
                "–†–æ–±–æ—Ç–∞ - –Ω–µ –≤–æ–ª–∫. –†–∞–±–æ—Ç–∞ - —ç—Ç–æ –≤–æ—Ä–∫, –∞ –≤–æ–ª–∫ - —ç—Ç–æ —Ö–æ–¥–∏—Ç—å",
                "–ù–µ —Ç–æ—Ç –≤–æ–ª–∫ –∫—Ç–æ –Ω–µ –≤–æ–ª–∫ –∞ –≤–æ–ª–∫ —Ç–æ—Ç –∫—Ç–æ –≤–æ–ª–∫ –Ω–æ –Ω–µ –∫–∞–∂–¥—ã–π –≤–æ–ª–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–ª–∫ –∞ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–ª–∫ –≤–æ–ª–∫",
                "–ü—Ä–∏–ø–∞–ø—É–ø–∞–ø—Ä–∏",
                "–ù–µ —Å—Ç–æ–∏—Ç –∏—Å–∫–∞—Ç—å –≤—ä–ª–∫–∞ —Ç–∞–º, –≥–¥–µ –µ–≥–æ –Ω–µ—Ç, - –µ–≥–æ —Ç–∞–º –Ω–µ—Ç",
                "–î—Ä—É–≥ –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –¥—Ä—É–≥",
                "–ï—Å–ª–∏ –¥–æ—Ñ–∏–≥–∞ —É–º–Ω—ã–π - —É–º–Ω–∏—á–∞–π, –Ω–æ –ø–æ–º–Ω–∏: –±–µ–∑ —É–º–∞ —É–º–Ω–∏—á–∞—Ç—å –Ω–µ –≤—ã–π–¥–µ—Ç. –¢–∞–∫ —á—Ç–æ –±—É–¥—å —É–º–Ω—ã–º, —á—Ç–æ–±—ã —É–º–Ω–∏—á–∞—Ç—å",
                "–í —ç—Ç–æ–π –∂–∏–∑–Ω–∏ —Ç—ã –ª–∏–±–æ –≤—ä–ª–∫—ä, –ª–∏–±–æ –Ω–µ –≤—ä–ª–∫—ä",
                "–ß—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ, —Ç–æ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞"
            ],
            "suggestions": []
        }

DATA = load_data()

ADMIN_ID = int(os.getenv("ADMIN_ID"))

def get_random_quote():
    return random.choice(DATA["quotes"])

async def inline_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query

    results = [
        InlineQueryResultArticle(
            id=str(uuid4()),
            title="–í—Å–ø–æ–º–Ω–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å",
            input_message_content=InputTextMessageContent(f"{get_random_quote()}\n\n–ú—É–¥—Ä–æ—Å—Ç—å—é –ø–æ–¥–µ–ª–∏–ª—Å—è –í–µ–ª–∏–∫–∏–π –í—ä–ª–∫—ä - @Vlk_quote_bot"),
            description="–í—ã –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ –º—É–¥—Ä–æ—Å—Ç—å –í–µ–ª–∏–∫–æ–≥–æ –≤—ä–ª–∫–∞"
        )
    ]

    await update.inline_query.answer(results, cache_time=0, is_personal=True)

async def suggest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    quote = " ".join(context.args).strip()
    DATA["suggestions"].append({"user_id": user.id, "quote": quote})
    save_data(DATA)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

async def addquote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç.")
        return
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    quote = " ".join(context.args).strip()
    DATA["quotes"].append(quote)
    save_data(DATA)
    await update.message.reply_text("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def listsuggest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    if not DATA["suggestions"]:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.")
        return
    messages = []
    for i, item in enumerate(DATA["suggestions"], start=1):
        messages.append(f"{i}. {item['quote']} (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item['user_id']})")
    await update.message.reply_text("\n".join(messages))

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç.")
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return
    index = int(context.args[0]) - 1
    if index < 0 or index >= len(DATA["suggestions"]):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã.")
        return
    quote = DATA["suggestions"].pop(index)["quote"]
    DATA["quotes"].append(quote)
    save_data(DATA)
    await update.message.reply_text("–¶–∏—Ç–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫.")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç.")
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        return
    index = int(context.args[0]) - 1
    if index < 0 or index >= len(DATA["suggestions"]):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã.")
        return
    quote = DATA["suggestions"].pop(index)["quote"]
    await update.message.reply_text("–¶–∏—Ç–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫.")

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands_text = (
        "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ WolfQuotes Bot:\n\n"
        "/suggest <—Ü–∏—Ç–∞—Ç–∞> - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É\n"
        "/addquote <—Ü–∏—Ç–∞—Ç–∞> - –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/listsuggest - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/approve <–Ω–æ–º–µ—Ä> - –æ–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        "/reject - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )
    await update.message.reply_text(commands_text)

async def post_init(application):
    from telegram import BotCommand
    commands = [
        BotCommand("suggest", "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É"),
        BotCommand("addquote", "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        BotCommand("listsuggest", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        BotCommand("approve", "–û–¥–æ–±—Ä–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"),
        BotCommand("reject", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
    ]
    await application.bot.set_my_commands(commands)

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running!")

def run_http_server():
    port = int(os.getenv("PORT", 8080))
    server = HTTPServer(("0.0.0.0", port), HealthHandler)
    print(f"HTTP healthcheck server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")  # –ó–∞–¥–∞–π —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã –∏–ª–∏ .env
    if not token:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
        return

    application = Application.builder().token(token).build()

    application.add_handler(InlineQueryHandler(inline_query_handler))
    application.add_handler(CommandHandler("suggest", suggest))
    application.add_handler(CommandHandler("addquote", addquote))
    application.add_handler(CommandHandler("listsuggest", listsuggest))
    application.add_handler(CommandHandler("approve", approve))
    application.add_handler(CommandHandler("help", show_commands))
    application.add_handler(CommandHandler("start", show_commands))
    application.add_handler(CommandHandler("reject", reject))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    application.run_polling()

if __name__ == '__main__':
    threading.Thread(target=run_http_server, daemon=True).start()
    main()